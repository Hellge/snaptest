<?php

/**
 * Text Output Unit Test Reporter
 */
class Snap_Tap_UnitTestReporter extends Snap_UnitTestReporter implements Snap_UnitTestReporterInterface {

    protected $type_mapping = array(
        'pass'      => true,
        'case'      => true,
        'fail'      => false,
        'skip'      => true,
        'todo'      => false,
        'defect'    => false,
        'phperr'    => false,
        'fatal'     => false,
    );
    
    protected $phperr = 0;
    protected $report_counter = 1;

    /**
     * generate a text based report of the output data
     * @return void
     */
    public function generateReport($reports) {
        
        // footer information
        echo "\n";
        echo "# Output generated by Snap TAP Output Reporter\n";
        echo "\n";

        
        if ($this->phperr > 0) {
            echo "\n";
            echo '# You have unchecked errors in your tests.  These errors should be'."\n";
            echo '# removed, or acknowledged with $this->willError() in their respective'."\n";
            echo '# tests.';
            echo "\n";
        }
    }
    
    // simulated TAP streaming does not do this
    public function announceTestPass($report) {
        $this->displayReport($report);
    }
    public function announceTestFail($report) {
        $this->displayReport($report);
    }
    public function announceTestTodo($report) {
        $this->displayReport($report);
    }    
    public function announceTestSkip($report) {
        $this->displayReport($report);
    }
    public function announceTestDefect($report) {
        $this->displayReport($report);
    }
    public function announceTestCaseComplete($report) {
        $this->displayReport($report);
    }
    
    protected function displayReport($report) {
        // skip case complete
        if ($report['type'] == 'case') {
            continue;
        }
        
        if ($report['type'] == 'debug') {
            $debug = str_replace(array("\r\n", "\r"), "\n", $report['message']);
            $debug = preg_replace('/\n/m', "\n# ", $debug);
            $file = $report['file'];
            echo "# DEBUG:\n# $file\n# $debug\n";
            continue;
        }
        
        if ($report['type'] == 'phperr') {
            $this->phperr++;
        }
        
        $report_number = $this->report_counter;
        $this->report_counter++;

        $function = (isset($report['function'])) ? $report['function'] : 'unknown';
        $classname = (isset($report['class'])) ? $report['class'] : 'unknown';
        $file = (isset($report['file'])) ? $report['file'] : 'unknown';
        $message = (isset($report['message'])) ? $report['message'] : 'unknown';
        
        // normalize pass status
        $pass_status = ($this->type_mapping[$report['type']]) ? 'ok' : 'not ok';
        
        // make pretty classname / function
        $pretty_function = preg_replace('/^test /i', '', preg_replace('/[^A-Z0-9 ]/i', '', preg_replace('/([A-Z])/', ' \\1', $function)));
        
        echo "$pass_status $report_number - $pretty_function\n";
        
        if (!$this->type_mapping[$report['type']]) {
            echo "  ---\n";
            echo "    message: $message\n";
            echo "    severity: fail\n";
            echo "    location:\n";
            echo "      method: $function\n";
            echo "      class:  $classname\n";
            echo "      file:   $file\n";
            echo "  ...\n";
        }
    }
}
